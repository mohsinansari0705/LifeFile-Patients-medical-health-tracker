'use client';

import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Bot, Loader2 } from 'lucide-react';
import { handleGenerateSummary } from '@/app/actions';
import { useToast } from '@/hooks/use-toast';
import { ScrollArea } from '@/components/ui/scroll-area';

interface AiSummaryDialogProps {
  patientName: string;
  medicalHistory: string;
}

export default function AiSummaryDialog({
  patientName,
  medicalHistory,
}: AiSummaryDialogProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [summary, setSummary] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const onGenerate = async () => {
    setIsLoading(true);
    setSummary('');

    const result = await handleGenerateSummary({
      patientName,
      medicalHistory,
    });

    setIsLoading(false);

    if (result.error) {
      toast({
        title: 'Error',
        description: result.error,
        variant: 'destructive',
      });
    } else if (result.summary) {
      setSummary(result.summary);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <Bot className="mr-2 h-4 w-4" />
          Generate AI Summary
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[625px]">
        <DialogHeader>
          <DialogTitle className="font-headline">
            AI-Generated Health Summary
          </DialogTitle>
          <DialogDescription>
            This is a concise overview of the patient's medical history,
            generated by AI. This is not medical advice.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4">
          {summary || isLoading ? (
            <ScrollArea className="h-72 w-full rounded-md border p-4">
              {isLoading && (
                <div className="flex items-center justify-center h-full">
                  <div className="text-center">
                    <Loader2 className="mx-auto h-8 w-8 animate-spin text-primary mb-2" />
                    <p className="text-muted-foreground">
                      Analyzing records and generating summary...
                    </p>
                  </div>
                </div>
              )}
              {summary && (
                <div
                  className="prose prose-sm dark:prose-invert"
                  dangerouslySetInnerHTML={{
                    __html: summary.replace(/\n/g, '<br />'),
                  }}
                />
              )}
            </ScrollArea>
          ) : (
            <div className="flex flex-col items-center justify-center h-72 rounded-md border border-dashed text-center p-4">
              <p className="text-muted-foreground mb-4">
                Click the button below to generate a health summary for{' '}
                {patientName}.
              </p>
              <Button onClick={onGenerate} disabled={isLoading}>
                {isLoading ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Bot className="mr-2 h-4 w-4" />
                )}
                Generate Summary
              </Button>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
